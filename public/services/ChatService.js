/**
 * ChatService - –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∏ AI-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
 */
export class ChatService {
    constructor() {
        this.conversationHistory = [];
        this.isInitialized = false;
        this.currentConversationId = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —á–∞—Ç–∞
     */
    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage
            this.loadConversationHistory();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            this.currentConversationId = this.generateConversationId();
            
            this.isInitialized = true;
            console.log('‚úÖ ChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatService:', error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendMessage(message, options = {}) {
        if (!this.isInitialized) {
            throw new Error('ChatService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMessage = {
                id: this.generateMessageId(),
                type: 'user',
                content: message,
                timestamp: new Date().toISOString(),
                conversationId: this.currentConversationId
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addMessageToHistory(userMessage);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showTypingIndicator();

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É AI-–æ—Ç–≤–µ—Ç–∞
            const aiResponse = await this.generateAIResponse(message, options);

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideTypingIndicator();

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è AI
            const aiMessage = {
                id: this.generateMessageId(),
                type: 'assistant',
                content: aiResponse,
                timestamp: new Date().toISOString(),
                conversationId: this.currentConversationId
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addMessageToHistory(aiMessage);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            this.saveConversationHistory();

            return aiMessage;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            this.hideTypingIndicator();
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç–≤–µ—Ç–∞
     */
    async generateAIResponse(message, options = {}) {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Gemini API
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        
        const responses = [
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø - –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –°–µ–∫—Ä–µ—Ç–∞—Ä—å+. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?',
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
            '–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
            '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ.',
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.'
        ];

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await this.delay(1000 + Math.random() * 2000);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
        return responses[Math.floor(Math.random() * responses.length)];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    getConversationHistory(conversationId = null) {
        const targetId = conversationId || this.currentConversationId;
        return this.conversationHistory.filter(msg => msg.conversationId === targetId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
     */
    getAllConversations() {
        const conversations = {};
        
        this.conversationHistory.forEach(message => {
            if (!conversations[message.conversationId]) {
                conversations[message.conversationId] = {
                    id: message.conversationId,
                    messages: [],
                    lastMessage: message.timestamp,
                    messageCount: 0
                };
            }
            conversations[message.conversationId].messages.push(message);
            conversations[message.conversationId].messageCount++;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return Object.values(conversations).sort((a, b) => 
            new Date(b.lastMessage) - new Date(a.lastMessage)
        );
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory(conversationId = null) {
        if (conversationId) {
            this.conversationHistory = this.conversationHistory.filter(
                msg => msg.conversationId !== conversationId
            );
        } else {
            this.conversationHistory = [];
        }
        
        this.saveConversationHistory();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    createNewConversation() {
        this.currentConversationId = this.generateConversationId();
        console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä:', this.currentConversationId);
        return this.currentConversationId;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
     */
    switchConversation(conversationId) {
        if (this.conversationHistory.some(msg => msg.conversationId === conversationId)) {
            this.currentConversationId = conversationId;
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä:', conversationId);
            return true;
        }
        return false;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    exportConversation(conversationId = null) {
        const targetId = conversationId || this.currentConversationId;
        const messages = this.getConversationHistory(targetId);
        
        const exportData = {
            conversationId: targetId,
            exportDate: new Date().toISOString(),
            messageCount: messages.length,
            messages: messages
        };

        const blob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
        });

        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `conversation-${targetId}-${new Date().toISOString().split('T')[0]}.json`;
        a.click();

        URL.revokeObjectURL(url);
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
     */
    searchInHistory(query, conversationId = null) {
        const targetId = conversationId || this.currentConversationId;
        const messages = this.getConversationHistory(targetId);
        
        if (!query || query.trim().length < 2) {
            return [];
        }

        const searchTerm = query.toLowerCase();
        
        return messages.filter(message => 
            message.content.toLowerCase().includes(searchTerm)
        );
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    analyzeConversationSentiment(conversationId = null) {
        const targetId = conversationId || this.currentConversationId;
        const messages = this.getConversationHistory(targetId);
        
        if (messages.length === 0) {
            return { sentiment: 'neutral', confidence: 0 };
        }

        // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const positiveWords = ['—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ª—é–±–ª—é', '—Ä–∞–¥'];
        const negativeWords = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω'];
        
        let positiveCount = 0;
        let negativeCount = 0;
        
        messages.forEach(message => {
            const content = message.content.toLowerCase();
            
            positiveWords.forEach(word => {
                if (content.includes(word)) positiveCount++;
            });
            
            negativeWords.forEach(word => {
                if (content.includes(word)) negativeCount++;
            });
        });

        if (positiveCount > negativeCount) {
            return { sentiment: 'positive', confidence: Math.min(positiveCount / messages.length, 1) };
        } else if (negativeCount > positiveCount) {
            return { sentiment: 'negative', confidence: Math.min(negativeCount / messages.length, 1) };
        } else {
            return { sentiment: 'neutral', confidence: 0.5 };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStatistics() {
        const conversations = this.getAllConversations();
        const totalMessages = this.conversationHistory.length;
        const totalConversations = conversations.length;
        
        let totalUserMessages = 0;
        let totalAIMessages = 0;
        
        this.conversationHistory.forEach(message => {
            if (message.type === 'user') {
                totalUserMessages++;
            } else if (message.type === 'assistant') {
                totalAIMessages++;
            }
        });

        return {
            totalMessages,
            totalConversations,
            totalUserMessages,
            totalAIMessages,
            averageMessagesPerConversation: totalConversations > 0 ? totalMessages / totalConversations : 0,
            lastActivity: this.conversationHistory.length > 0 ? 
                this.conversationHistory[this.conversationHistory.length - 1].timestamp : null
        };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addMessageToHistory(message) {
        this.conversationHistory.push(message);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if (this.conversationHistory.length > 1000) {
            this.conversationHistory = this.conversationHistory.slice(-1000);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ localStorage
     */
    saveConversationHistory() {
        try {
            localStorage.setItem('secretary-plus-chat-history', JSON.stringify(this.conversationHistory));
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ localStorage
     */
    loadConversationHistory() {
        try {
            const saved = localStorage.getItem('secretary-plus-chat-history');
            if (saved) {
                this.conversationHistory = JSON.parse(saved);
                console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:', this.conversationHistory.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞:', error);
            this.conversationHistory = [];
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    generateConversationId() {
        return `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    generateMessageId() {
        return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ (–¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏)
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
     */
    showTypingIndicator() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ UIManager
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
     */
    hideTypingIndicator() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ UIManager
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    isReady() {
        return this.isInitialized;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    getCurrentConversationId() {
        return this.currentConversationId;
    }
} 