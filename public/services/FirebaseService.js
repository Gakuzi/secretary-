/**
 * FirebaseService - –ó–∞–º–µ–Ω–∞ Supabase –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Firebase Firestore –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class FirebaseService {
    constructor() {
        this.isInitialized = false;
        this.db = null;
        this.auth = null;
        this.storage = null;
        this.currentUser = null;
        
        // Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            apiKey: this.getApiKey(),
            authDomain: this.getAuthDomain(),
            projectId: this.getProjectId(),
            storageBucket: this.getStorageBucket(),
            messagingSenderId: this.getMessagingSenderId(),
            appId: this.getAppId()
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
     */
    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º Firebase SDK
            await this.loadFirebaseSDK();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
            if (window.firebase) {
                window.firebase.initializeApp(this.config);
                
                this.db = window.firebase.firestore();
                this.auth = window.firebase.auth();
                this.storage = window.firebase.storage();
                
                this.isInitialized = true;
                console.log('‚úÖ FirebaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                this.setupAuthListeners();
                
            } else {
                throw new Error('Firebase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FirebaseService:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ Firebase SDK
     */
    loadFirebaseSDK() {
        return new Promise((resolve, reject) => {
            if (window.firebase) {
                resolve();
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º Firebase App
            const appScript = document.createElement('script');
            appScript.src = 'https://www.gstatic.com/firebasejs/9.0.0/firebase-app.js';
            appScript.onload = () => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º Firebase Auth
                const authScript = document.createElement('script');
                authScript.src = 'https://www.gstatic.com/firebasejs/9.0.0/firebase-auth.js';
                authScript.onload = () => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º Firebase Firestore
                    const firestoreScript = document.createElement('script');
                    firestoreScript.src = 'https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore.js';
                    firestoreScript.onload = () => {
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º Firebase Storage
                        const storageScript = document.createElement('script');
                        storageScript.src = 'https://www.gstatic.com/firebasejs/9.0.0/firebase-storage.js';
                        storageScript.onload = resolve;
                        storageScript.onerror = reject;
                        document.head.appendChild(storageScript);
                    };
                    firestoreScript.onerror = reject;
                    document.head.appendChild(firestoreScript);
                };
                authScript.onerror = reject;
                document.head.appendChild(authScript);
            };
            appScript.onerror = reject;
            document.head.appendChild(appScript);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    getApiKey() {
        return localStorage.getItem('firebase-api-key') || '';
    }

    getAuthDomain() {
        return localStorage.getItem('firebase-auth-domain') || '';
    }

    getProjectId() {
        return localStorage.getItem('firebase-project-id') || '';
    }

    getStorageBucket() {
        return localStorage.getItem('firebase-storage-bucket') || '';
    }

    getMessagingSenderId() {
        return localStorage.getItem('firebase-messaging-sender-id') || '';
    }

    getAppId() {
        return localStorage.getItem('firebase-app-id') || '';
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    setupAuthListeners() {
        this.auth.onAuthStateChanged((user) => {
            if (user) {
                this.currentUser = user;
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Firebase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', user.email);
            } else {
                this.currentUser = null;
                console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Firebase –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            }
        });
    }

    /**
     * Google –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Firebase
     */
    async signInWithGoogle() {
        try {
            const provider = new window.firebase.auth.GoogleAuthProvider();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            provider.addScope('https://www.googleapis.com/auth/calendar');
            provider.addScope('https://www.googleapis.com/auth/gmail.readonly');
            provider.addScope('https://www.googleapis.com/auth/gmail.send');
            provider.addScope('https://www.googleapis.com/auth/contacts.readonly');
            
            const result = await this.auth.signInWithPopup(provider);
            
            // –ü–æ–ª—É—á–∞–µ–º Google —Ç–æ–∫–µ–Ω –¥–ª—è API
            const credential = result.credential;
            const accessToken = credential.accessToken;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            localStorage.setItem('google-access-token', accessToken);
            
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google');
            return result.user;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Google –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    async signOut() {
        try {
            await this.auth.signOut();
            localStorage.removeItem('google-access-token');
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.currentUser;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    isAuthenticated() {
        return !!this.currentUser;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Google —Ç–æ–∫–µ–Ω–∞
     */
    async getGoogleAccessToken() {
        if (this.currentUser) {
            try {
                const token = await this.currentUser.getIdToken(true);
                return token;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
                return null;
            }
        }
        return null;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async saveUserData(userData) {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const userRef = this.db.collection('users').doc(this.currentUser.uid);
            await userRef.set({
                ...userData,
                updatedAt: new Date(),
                email: this.currentUser.email
            }, { merge: true });

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserData() {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const userRef = this.db.collection('users').doc(this.currentUser.uid);
            const doc = await userRef.get();

            if (doc.exists) {
                return doc.data();
            } else {
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async saveSettings(settings) {
        try {
            const userData = await this.getUserData() || {};
            userData.settings = settings;
            await this.saveUserData(userData);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async getSettings() {
        try {
            const userData = await this.getUserData();
            return userData?.settings || {};
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            return {};
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
     */
    async saveChatHistory(conversationId, messages) {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const chatRef = this.db.collection('users').doc(this.currentUser.uid)
                .collection('chats').doc(conversationId);
            
            await chatRef.set({
                conversationId,
                messages,
                updatedAt: new Date(),
                messageCount: messages.length
            });

            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
     */
    async getChatHistory(conversationId) {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const chatRef = this.db.collection('users').doc(this.currentUser.uid)
                .collection('chats').doc(conversationId);
            
            const doc = await chatRef.get();
            
            if (doc.exists) {
                return doc.data();
            } else {
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
     */
    async getChatList() {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const chatsRef = this.db.collection('users').doc(this.currentUser.uid)
                .collection('chats');
            
            const snapshot = await chatsRef.orderBy('updatedAt', 'desc').get();
            
            const chats = [];
            snapshot.forEach(doc => {
                chats.push({
                    id: doc.id,
                    ...doc.data()
                });
            });

            return chats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
            return [];
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
     */
    async deleteChat(conversationId) {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const chatRef = this.db.collection('users').doc(this.currentUser.uid)
                .collection('chats').doc(conversationId);
            
            await chatRef.delete();
            console.log('‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async uploadFile(file, path) {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const storageRef = this.storage.ref();
            const fileRef = storageRef.child(`users/${this.currentUser.uid}/${path}`);
            
            const snapshot = await fileRef.put(file);
            const downloadURL = await snapshot.ref.getDownloadURL();
            
            console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', downloadURL);
            return downloadURL;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async deleteFile(path) {
        try {
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const storageRef = this.storage.ref();
            const fileRef = storageRef.child(`users/${this.currentUser.uid}/${path}`);
            
            await fileRef.delete();
            console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
     */
    configureFirebase(config) {
        Object.keys(config).forEach(key => {
            if (config[key]) {
                localStorage.setItem(`firebase-${key}`, config[key]);
            }
        });
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (this.isInitialized) {
            this.init();
        }
        
        console.log('‚úÖ Firebase –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase
     */
    getFirebaseConfig() {
        return {
            apiKey: this.getApiKey(),
            authDomain: this.getAuthDomain(),
            projectId: this.getProjectId(),
            storageBucket: this.getStorageBucket(),
            messagingSenderId: this.getMessagingSenderId(),
            appId: this.getAppId()
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    isReady() {
        return this.isInitialized && !!this.db && !!this.auth;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async getStatistics() {
        try {
            if (!this.currentUser) {
                return null;
            }

            const userData = await this.getUserData();
            const chatList = await this.getChatList();
            
            return {
                userId: this.currentUser.uid,
                email: this.currentUser.email,
                createdAt: userData?.createdAt,
                lastActivity: userData?.updatedAt,
                totalChats: chatList.length,
                totalMessages: chatList.reduce((sum, chat) => sum + (chat.messageCount || 0), 0),
                settings: userData?.settings || {}
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }
} 